//stack is a linear data structure which follow first in first out mechanism

//stack using Arrays

#include<stdio.h> 
int main() 
{ 
    int ch,i,n,a[100],ele; 
    int top=-1; 
    printf("enter the size of the stack:"); 
 
    scanf("%d",&n); 
    while(1) 
    { 
        printf("\n1->insert \n2->remove\n3->top element \n4->search element \n5->exit\n"); 
        scanf("%d",&ch); 
        switch(ch) 
        { 
            case 1:if(top<n-1){ 
                     top=top+1; 
                     printf("\nenter the element to insert:"); 
                     scanf("%d",&a[top]); 
                    } 
                    else if(top==n-1) 
                    { 
                        printf("\nover flow unable to insert the element"); 
                    } 
                    break; 
           case 2:if(top<0) 
                     printf("\nno element to delete i.e., stack underflow"); 
                  else{ 
                        printf("\n%d is removed sucessfull...",a[top]); 
                    top=top-1; 
                  } 
                  break; 
          case 3:if(top<0){ 
                     printf("\nno element is present in the stack to display...."); 
                  } 
                  else 
                    printf("\ntop element is :%d",a[top]); 
                 break; 
          case 4:printf("\nenter the element to search:"); 
                 scanf("%d",&ele); 
                 for(i=0;i<=top;i++) 
                 { 
                     if(a[i]==ele) 
                     { 
                         printf("\n %d is found...",ele); 
                     } 
 
                 } 
                 if(i>top) 
                 { 
                     printf("\n%d is not found.....",ele); 
                 } 
                 break; 
          case 5:exit(0); 
          default:printf("\nenter the valid key...\ndisplaying the array elements:"); 
                  for(i=0;i<=top;i++) 
                  { 
                      printf("%d ",a[i]); 
                  } 
        } 
    } 
 
}
