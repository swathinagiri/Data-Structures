# quaue follows first in first out mechanism

#quaue using arrays

#include<stdio.h>
int main()
{
    int n,i,front=-1,back=-1,ch,ele,top=-1;
    printf("\nenter the size of the queue:");
    scanf("%d",&n);
    int a[100];
    while(1)
    {
        printf("\n1->insert at start\n2->insert at end\n3->delete front\n4->delete end\n5->element to search\n6->display the elements\n7->top element\n8->buttom element\n9->exit");
        printf("\nselect your option...:");
        scanf("%d",&ch);
        switch(ch)
        {
            case 1:printf("\nenter the element to insert at starting:");
                   scanf("%d",&ele);
                   if(front==-1 && back==-1)
                   {
                       front=front+1;
                       back=back+1;
                       //top=top+1;
                       a[back]=ele;
                   }
                   else if(back<n-1 && back >-1)
                   {
                      // top=top+1;
                      back=back+1;
                       for(i=back;i>front;i--)
                       {
                           a[i]=a[i-1];
                       }
                       a[front]=ele;

                   }
                   else
                   {
                       printf("quaue overflow\n");

                   }
                   break;
            case 2:printf("\nenter the element to insert at ending:");
                   scanf("%d",&ele);
                   if(front==-1 && back==-1)
                   {
                       front=front+1;
                       back=back+1;
                       a[back]=ele;
                   }
                   else if(back>-1 && back<n-1)
                   {
                       back=back+1;
                       a[back]=ele;
                   }
                   else{
                    printf("\nqueue is over flow....");
                   }
                   break;
            case 3:if(front<0)
                   {
                       printf("\nquaue underflow....");
                   }
                   else if(front>=back){
                        printf("\nquaue is empty");
                        front=-1;
                        back=-1;
                   }
                   else{
                    printf("\n%d is removed.....",a[front]);
                    for(i=front;i<back;i++)
                    {
                        a[i]=a[i+1];
                    }
                    back=back-1;
                   }
                   break;
            case 4:if(back>=0)
                    {
                        printf("\n%d is removed.....",a[back]);
                        back=back-1;
                    }
                    else if(back<0 || front>=back)
                    {
                        printf("quaue is underflow....");
                        front=-1;
                        back=-1;
                    }
                    break;
            case 5:printf("\neneter the element to search:");
                   scanf("%d",&ele);
                   for(i=front;i<=back;i++)
                   {
                       if(a[i]==ele)
                       {
                           printf("\n%d is found....",ele);
                       }
                   }
                   if(i>back+1)
                      printf("\n%d is not found....");
                   break;
            case 6:printf("\nfront value is:%d and back value is:%d",front,back);
                    printf("\ndisplaying the elements:");
                    if(back==front==-1)
                      printf("\nquaue is underflow.....");
                    else{
                            //printf("\nfront value is:%d and back value is:%d",front,back);

                        for(i=front;i<=back;i++)
                        {
                            printf("%d ",a[i]);
                        }
                    }
                    break;
            case 7:if(front==-1 && back==-1)
                    printf("\nquaue is underflow....");
                    else
                        printf("\n%d is the 1st element in quaue...",a[front]);
                    break;
            case 8:if(front==-1 && back==-1)
                        printf("\nquaue is underflow...");
                    else
                        printf("\n%d is the last element...",a[back]);
                    break;
            case 9:exit(0);

        }
    }
    return 0;
}
